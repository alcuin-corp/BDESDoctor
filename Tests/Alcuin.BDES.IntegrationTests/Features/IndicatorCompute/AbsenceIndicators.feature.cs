// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Alcuin.BDES.IntegrationTests.Features.IndicatorCompute
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Absence Indicators")]
    public partial class AbsenceIndicatorsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AbsenceIndicators.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Absence Indicators", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
 testRunner.Given("I have a workbook mybook.xlsx", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Matricule",
                        "Structure",
                        "Sexe",
                        "CSP",
                        "Nationalité",
                        "Type de contrat",
                        "Nature de la fin de contrat",
                        "Date de naissance",
                        "Durée du temps de travail hebdomadaire",
                        "Date d\'entrée",
                        "Date de sortie"});
#line 5
 testRunner.And("it has a workSheet effectifs with the following content", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Matricule",
                        "Structure",
                        "CSP",
                        "Nature de l\'absence",
                        "Nombre de jour d\'absence",
                        "Sexe"});
            table4.AddRow(new string[] {
                        "1254",
                        "Alcuin",
                        "Cadre",
                        "RTT",
                        "5",
                        "H"});
            table4.AddRow(new string[] {
                        "1254",
                        "Alcuin",
                        "Cadre",
                        "CP",
                        "3",
                        "H"});
            table4.AddRow(new string[] {
                        "1254",
                        "Alcuin",
                        "Cadre",
                        "RTT",
                        "1",
                        "H"});
            table4.AddRow(new string[] {
                        "1555",
                        "CGI",
                        "CADRE",
                        "Maladie",
                        "10",
                        "F"});
#line 7
 testRunner.And("it has also a workSheet Absences with the following content", ((string)(null)), table4, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator :  Nombre de salariés ayant bénéficié d\'un repos compensateu" +
            "r au titre du présent code")]
        public virtual void GeneratingIndicatorNombreDeSalariesAyantBeneficieDunReposCompensateurAuTitreDuPresentCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator :  Nombre de salariés ayant bénéficié d\'un repos compensateu" +
                    "r au titre du présent code", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table5.AddRow(new string[] {
                            "Absences",
                            "Autres conditions de travail",
                            "Durée et aménagement du temps de travail",
                            "Nombre de salariés ayant bénéficié d\'un repos compensateur au titre du présent co" +
                                "de",
                            "[CSP]",
                            "Count [Matricule] group by [Structure] Where [Nature de l\'absence] = \'repos compe" +
                                "nsateur équivalent\' And [CSP] = \'Enum\'"});
#line 15
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table5, "Given ");
#line hidden
#line 18
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator :  Nombre de salariés ayant bénéficié d\'un repos compensateu" +
            "r au titre d\'un régime conventionnel")]
        public virtual void GeneratingIndicatorNombreDeSalariesAyantBeneficieDunReposCompensateurAuTitreDunRegimeConventionnel()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator :  Nombre de salariés ayant bénéficié d\'un repos compensateu" +
                    "r au titre d\'un régime conventionnel", null, ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table6.AddRow(new string[] {
                            "Absences",
                            "Autres conditions de travail",
                            "Durée et aménagement du temps de travail",
                            "Nombre de salariés ayant bénéficié d\'un repos compensateur au titre d\'un régime c" +
                                "onventionnel",
                            "[CSP]",
                            "Count [Matricule] group by [Structure] Where [Nature de l\'absence] = \'repos compe" +
                                "nsateur nuit\' And [CSP] = \'Enum\'"});
#line 22
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table6, "Given ");
#line hidden
#line 25
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator :  Nombre de journées d\'absence pour maladie")]
        public virtual void GeneratingIndicatorNombreDeJourneesDabsencePourMaladie()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator :  Nombre de journées d\'absence pour maladie", null, ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table7.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail",
                            "Absentéisme",
                            "Nombre de journées d\'absence pour maladie",
                            "[CSP]",
                            "Sum [Nombre de jour d\'absence] Group by [Structure] Where [nature de l\'absence] =" +
                                " \'maladie\' And [CSP] = \'Enum\'"});
#line 29
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table7, "Given ");
#line hidden
#line 32
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre de journées d\'absence imputables à d\'autres causes")]
        public virtual void GeneratingIndicatorNombreDeJourneesDabsenceImputablesADautresCauses()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre de journées d\'absence imputables à d\'autres causes", null, ((string[])(null)));
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table8.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail",
                            "Absentéisme",
                            "Nombre de journées d\'absence imputables à d\'autres causes",
                            "[CSP]",
                            "Sum [Nombre de jour d\'absence] Group by [structure] Where [Nature de l\'absence] n" +
                                "otin (\'évènement familial\',\'congés spéciaux\',\'maternité\', \'maladie professionnel" +
                                "le\', \'accident de travail\', \'accident de trajet\', \'maladie\') And [CSP] = \'Enum\'"});
#line 36
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table8, "Given ");
#line hidden
#line 39
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre de journées d\'absence pour congés autorisés")]
        public virtual void GeneratingIndicatorNombreDeJourneesDabsencePourCongesAutorises()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre de journées d\'absence pour congés autorisés", null, ((string[])(null)));
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table9.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail",
                            "Absentéisme",
                            "Nombre de journées d\'absence pour congés autorisés",
                            "[CSP]",
                            "Sum [Nombre de jour d\'absence] Group by [Structure] Where [nature de l\'absence] I" +
                                "n (\'évènement familial\',\'congé spécial\') And [CSP] = \'Enum\'"});
#line 43
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table9, "Given ");
#line hidden
#line 46
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre de journées d\'absence pour maternité")]
        public virtual void GeneratingIndicatorNombreDeJourneesDabsencePourMaternite()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre de journées d\'absence pour maternité", null, ((string[])(null)));
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table10.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail",
                            "Absentéisme",
                            "Nombre de journées d\'absence pour maternité",
                            "[CSP]",
                            "Sum [Nombre de jour d\'absence] Group by [Structure] Where [nature de l\'absence] =" +
                                " \'absence maternité\' And [CSP] = \'Enum\'"});
#line 50
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table10, "Given ");
#line hidden
#line 53
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre de journées d\'absence pour accident de travail, acc" +
            "ident de trajet ou maladie professionnelle")]
        public virtual void GeneratingIndicatorNombreDeJourneesDabsencePourAccidentDeTravailAccidentDeTrajetOuMaladieProfessionnelle()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre de journées d\'absence pour accident de travail, acc" +
                    "ident de trajet ou maladie professionnelle", null, ((string[])(null)));
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table11.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail, santé et sécurité au travail",
                            "Conditions de travail, santé et sécurité au travail",
                            "Nombre de journées d\'absence pour accident de travail, accident de trajet ou mala" +
                                "die professionnelle",
                            "[CSP]",
                            "Sum [Nombre de jour d\'absence] Group by [Structure] Where [nature de l\'absence]  " +
                                "dans (\'maladie professionnelle\',\'accident de travail\',\'accident de trajet\') And " +
                                "[CSP] est  \'Enum\'"});
#line 57
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table11, "Given ");
#line hidden
#line 60
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre d\'accidents avec arrêts de travail")]
        public virtual void GeneratingIndicatorNombreDaccidentsAvecArretsDeTravail()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre d\'accidents avec arrêts de travail", null, ((string[])(null)));
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table12.AddRow(new string[] {
                            "Absences",
                            "Condition de travail et Articulation entre vie professionnelle et personnelle",
                            "Accident de travail et trajet",
                            "Nombre d\'accidents avec arrêts de travail",
                            "[Sexe]",
                            "Count [Matricule] group by [Structure] Where [Nature de l\'absence] In (\'accident " +
                                "de travail\', \'accident de trajet\') And [Sexe] = \'Enum\'"});
#line 64
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table12, "Given ");
#line hidden
#line 67
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.Then("I should compute 2 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre d\'accidents de trajet ayant entrainé un arrêt de tr" +
            "avail (par sexe)")]
        public virtual void GeneratingIndicatorNombreDaccidentsDeTrajetAyantEntraineUnArretDeTravailParSexe()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre d\'accidents de trajet ayant entrainé un arrêt de tr" +
                    "avail (par sexe)", null, ((string[])(null)));
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table13.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail, santé et sécurité au travail",
                            "Conditions de travail, santé et sécurité au travail",
                            "Nombre d\'accidents de trajet ayant entrainé un arrêt de travail (par sexe)",
                            "[Sexe]",
                            "Count [Matricule] group by [Structure] Where [Nature de l\'absence] = \'accident de" +
                                " trajet\' And [Sexe] = \'Enum\'"});
#line 71
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table13, "Given ");
#line hidden
#line 74
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
 testRunner.Then("I should compute 2 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre d\'accidents de travail ayant entrainé un arrêt de t" +
            "ravail")]
        public virtual void GeneratingIndicatorNombreDaccidentsDeTravailAyantEntraineUnArretDeTravail()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre d\'accidents de travail ayant entrainé un arrêt de t" +
                    "ravail", null, ((string[])(null)));
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table14.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail, santé et sécurité au travail",
                            "Conditions de travail, santé et sécurité au travail",
                            "Nombre d\'accidents de travail ayant entrainé un arrêt de travail",
                            "[Sexe]",
                            "Count [Matricule] group by [Structure] Where [Nature de l\'absence] = \'accident de" +
                                " travail\' And [Sexe] = \'Enum\'"});
#line 78
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table14, "Given ");
#line hidden
#line 81
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
 testRunner.Then("I should compute 2 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
