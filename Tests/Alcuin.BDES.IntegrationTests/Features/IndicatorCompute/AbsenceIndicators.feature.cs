// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Alcuin.BDES.IntegrationTests.Features.IndicatorCompute
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Absence Indicators")]
    public partial class AbsenceIndicatorsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AbsenceIndicators.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Absence Indicators", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
 testRunner.Given("I have a workbook mybook.xlsx", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Matricule",
                        "Structure",
                        "Sexe",
                        "CSP",
                        "Nationalité",
                        "Type de contrat",
                        "Nature de la fin de contrat",
                        "Date de naissance",
                        "Durée du temps de travail hebdomadaire",
                        "Date d\'entrée",
                        "Date de sortie"});
            table3.AddRow(new string[] {
                        "1254",
                        "Alcuin",
                        "Homme",
                        "Cadre",
                        "Francaise",
                        "CDI",
                        "dem",
                        "16/03/1986",
                        "15",
                        "12/12/2012",
                        ""});
            table3.AddRow(new string[] {
                        "1255",
                        "Alcuin",
                        "Homme",
                        "Cadre",
                        "Francaise",
                        "CDI",
                        "dem",
                        "16/04/1987",
                        "40",
                        "12/12/2012",
                        "13/05/2013"});
            table3.AddRow(new string[] {
                        "1256",
                        "CGI",
                        "Homme",
                        "Cadre",
                        "Francaise",
                        "CDI",
                        "dem",
                        "16/03/1987",
                        "33",
                        "12/12/2012",
                        "16/03/1986"});
            table3.AddRow(new string[] {
                        "1257",
                        "CGI",
                        "Femme",
                        "Cadre",
                        "Francaise",
                        "CDI",
                        "dem",
                        "16/03/1987",
                        "40",
                        "12/12/2012",
                        "30/06/2019"});
            table3.AddRow(new string[] {
                        "1235",
                        "Alcuin",
                        "Femme",
                        "ouvrier",
                        "Autre",
                        "CDI",
                        "dem",
                        "16/03/1983",
                        "40",
                        "12/12/2012",
                        ""});
#line 5
 testRunner.And("it has a workSheet effectifs with the following content", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Matricule",
                        "Structure",
                        "CSP",
                        "Nature de l\'absence",
                        "Nombre de jour d\'absence",
                        "Sexe"});
            table4.AddRow(new string[] {
                        "1254",
                        "Alcuin",
                        "Cadre",
                        "RTT",
                        "5",
                        "H"});
            table4.AddRow(new string[] {
                        "1254",
                        "Alcuin",
                        "Cadre",
                        "CP",
                        "3",
                        "H"});
            table4.AddRow(new string[] {
                        "1254",
                        "Alcuin",
                        "Cadre",
                        "RTT",
                        "1",
                        "H"});
            table4.AddRow(new string[] {
                        "1555",
                        "CGI",
                        "CADRE",
                        "Maladie",
                        "10",
                        "F"});
#line 12
 testRunner.And("it has also a workSheet Absences with the following content", ((string)(null)), table4, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator :  Nombre de salariés ayant bénéficié d\'un repos compensateu" +
            "r au titre du présent code")]
        public virtual void GeneratingIndicatorNombreDeSalariesAyantBeneficieDunReposCompensateurAuTitreDuPresentCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator :  Nombre de salariés ayant bénéficié d\'un repos compensateu" +
                    "r au titre du présent code", null, ((string[])(null)));
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table5.AddRow(new string[] {
                            "Absences",
                            "Autres conditions de travail",
                            "Durée et aménagement du temps de travail",
                            "Nombre de salariés ayant bénéficié d\'un repos compensateur au titre du présent co" +
                                "de",
                            "[CSP]",
                            "Nombre [Matricule] par [Structure] dont [Nature de l\'absence] est \'repos compensa" +
                                "teur équivalent\' et [CSP] est \'Enum\'"});
#line 20
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table5, "Given ");
#line hidden
#line 23
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator :  Nombre de salariés ayant bénéficié d\'un repos compensateu" +
            "r au titre d\'un régime conventionnel")]
        public virtual void GeneratingIndicatorNombreDeSalariesAyantBeneficieDunReposCompensateurAuTitreDunRegimeConventionnel()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator :  Nombre de salariés ayant bénéficié d\'un repos compensateu" +
                    "r au titre d\'un régime conventionnel", null, ((string[])(null)));
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table6.AddRow(new string[] {
                            "Absences",
                            "Autres conditions de travail",
                            "Durée et aménagement du temps de travail",
                            "Nombre de salariés ayant bénéficié d\'un repos compensateur au titre d\'un régime c" +
                                "onventionnel",
                            "[CSP]",
                            "Nombre [Matricule] par [Structure] dont [Nature de l\'absence] est \'repos compensa" +
                                "teur nuit\' et [CSP] est \'Enum\'"});
#line 27
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table6, "Given ");
#line hidden
#line 30
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator :  Nombre de journées d\'absence pour maladie")]
        public virtual void GeneratingIndicatorNombreDeJourneesDabsencePourMaladie()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator :  Nombre de journées d\'absence pour maladie", null, ((string[])(null)));
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table7.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail",
                            "Absentéisme",
                            "Nombre de journées d\'absence pour maladie",
                            "[CSP]",
                            "Somme [Nombre de jour d\'absence] par [Structure] dont [nature de l\'absence] est \'" +
                                "maladie\' et [CSP] est \'Enum\'"});
#line 34
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table7, "Given ");
#line hidden
#line 37
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre de journées d\'absence imputables à d\'autres causes")]
        public virtual void GeneratingIndicatorNombreDeJourneesDabsenceImputablesADautresCauses()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre de journées d\'absence imputables à d\'autres causes", null, ((string[])(null)));
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table8.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail",
                            "Absentéisme",
                            "Nombre de journées d\'absence imputables à d\'autres causes",
                            "[CSP]",
                            "Somme [Nombre de jour d\'absence] par [structure] dont [Nature de l\'absence] notin" +
                                " (\'évènement familial\',\'congés spéciaux\',\'maternité\', \'maladie professionnelle\'," +
                                " \'accident de travail\', \'accident de trajet\', \'maladie\') et [CSP] est \'Enum\'"});
#line 41
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table8, "Given ");
#line hidden
#line 44
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre de journées d\'absence pour congés autorisés")]
        public virtual void GeneratingIndicatorNombreDeJourneesDabsencePourCongesAutorises()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre de journées d\'absence pour congés autorisés", null, ((string[])(null)));
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table9.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail",
                            "Absentéisme",
                            "Nombre de journées d\'absence pour congés autorisés",
                            "[CSP]",
                            "Somme [Nombre de jour d\'absence] par [Structure] dont [nature de l\'absence] dans " +
                                "(\'évènement familial\',\'congé spécial\') et [CSP] est \'Enum\'"});
#line 48
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table9, "Given ");
#line hidden
#line 51
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre de journées d\'absence pour maternité")]
        public virtual void GeneratingIndicatorNombreDeJourneesDabsencePourMaternite()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre de journées d\'absence pour maternité", null, ((string[])(null)));
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table10.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail",
                            "Absentéisme",
                            "Nombre de journées d\'absence pour maternité",
                            "[CSP]",
                            "Somme [Nombre de jour d\'absence] par [Structure] dont [nature de l\'absence] est \'" +
                                "absence maternité\' et [CSP] est \'Enum\'"});
#line 55
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table10, "Given ");
#line hidden
#line 58
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre de journées d\'absence pour accident de travail, acc" +
            "ident de trajet ou maladie professionnelle")]
        public virtual void GeneratingIndicatorNombreDeJourneesDabsencePourAccidentDeTravailAccidentDeTrajetOuMaladieProfessionnelle()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre de journées d\'absence pour accident de travail, acc" +
                    "ident de trajet ou maladie professionnelle", null, ((string[])(null)));
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table11.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail, santé et sécurité au travail",
                            "Conditions de travail, santé et sécurité au travail",
                            "Nombre de journées d\'absence pour accident de travail, accident de trajet ou mala" +
                                "die professionnelle",
                            "[CSP]",
                            "Somme [Nombre de jour d\'absence] par [Structure] dont [nature de l\'absence]  dans" +
                                " (\'maladie professionnelle\',\'accident de travail\',\'accident de trajet\') et [CSP]" +
                                " est  \'Enum\'"});
#line 62
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table11, "Given ");
#line hidden
#line 65
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.Then("I should compute 5 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre d\'accidents avec arrêts de travail")]
        public virtual void GeneratingIndicatorNombreDaccidentsAvecArretsDeTravail()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre d\'accidents avec arrêts de travail", null, ((string[])(null)));
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table12.AddRow(new string[] {
                            "Absences",
                            "Condition de travail et Articulation entre vie professionnelle et personnelle",
                            "Accident de travail et trajet",
                            "Nombre d\'accidents avec arrêts de travail",
                            "[Sexe]",
                            "Nombre [Matricule] par [structure] dont [Nature de l\'absence] dans (\'accident de " +
                                "travail\', \'accident de trajet\') et [Sexe] est \'Enum\'"});
#line 69
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table12, "Given ");
#line hidden
#line 72
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.Then("I should compute 2 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre d\'accidents de trajet ayant entrainé un arrêt de tr" +
            "avail (par sexe)")]
        public virtual void GeneratingIndicatorNombreDaccidentsDeTrajetAyantEntraineUnArretDeTravailParSexe()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre d\'accidents de trajet ayant entrainé un arrêt de tr" +
                    "avail (par sexe)", null, ((string[])(null)));
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table13.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail, santé et sécurité au travail",
                            "Conditions de travail, santé et sécurité au travail",
                            "Nombre d\'accidents de trajet ayant entrainé un arrêt de travail (par sexe)",
                            "[Sexe]",
                            "Nombre [Matricule] par [structure] dont [Nature de l\'absence] est \'accident de tr" +
                                "ajet\'  et [Sexe] est \'Enum\'"});
#line 76
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table13, "Given ");
#line hidden
#line 79
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.Then("I should compute 2 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating indicator : Nombre d\'accidents de travail ayant entrainé un arrêt de t" +
            "ravail")]
        public virtual void GeneratingIndicatorNombreDaccidentsDeTravailAyantEntraineUnArretDeTravail()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating indicator : Nombre d\'accidents de travail ayant entrainé un arrêt de t" +
                    "ravail", null, ((string[])(null)));
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Onglet",
                            "Domaine",
                            "Sous Domaine",
                            "Indicateur",
                            "Champs",
                            "Formule"});
                table14.AddRow(new string[] {
                            "Absences",
                            "Conditions de travail, santé et sécurité au travail",
                            "Conditions de travail, santé et sécurité au travail",
                            "Nombre d\'accidents de travail ayant entrainé un arrêt de travail",
                            "[Sexe]",
                            "Nombre [Matricule] par [structure] dont [Nature de l\'absence] est \'accident de tr" +
                                "avail\'  et [Sexe] est \'Enum\'"});
#line 83
 testRunner.Given("I have the folowing indicators definition", ((string)(null)), table14, "Given ");
#line hidden
#line 86
 testRunner.When("I start processing the file mybook.xlsx for the period of 1986", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.Then("I should compute 2 indicators", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
